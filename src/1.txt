라우트 = 경로

페이지 라우팅 = 경로를 지정하는 과정

앱에서 월별 일기 리스트
지난달로 가면 일기 없음 = 월별 일기 세부 페이지 존재




리액트에서의 페이지 라우팅 서버 사이드 렌더링과 클라이언트 사이드 렌더링이 구분
다만 리액트는 클라이언트 사이드 렌더링을 채택





서버사이드 렌더링
1. 웹브라우저에서 url로 서비스 요청
   naver_webtoon.com 들어가서 만화 서비스 요청
2. 웹서버는 요청 url에서 경로 blog를 보고 해당 html을 반환
3. 화면 렌더링



클라이언트 사이드 렌더링
- html 파일이 하나 (메인 app.js 안에 컴포넌트 나눈 것들이 하나로 뭉쳐서 컨텐츠 표시)
- 서버사이드방식과 달리 요청 url을 따지지 않고
  자바스크립트로 나누어진 리액트 앱을 리턴
  처음에 서버를 시작할때는 서버사이드 방식보다 느린데 키고 나서는 빠름


가끔씩 리액트를 서버사이드 렌더링 방식으로 돌려야할 경우도 생기긴 한다. (Next.js는 그래서 유니버셜 렌더링 방식 채택)


언급했던 클라이언트 렌더링을 하려는게 리액트 라우터
(react-router-dom)






페이지 컴포넌트 만들기 (구성요소의 파악)

home - 메인 화면
new - 새 일기 화면
diary - 일기 상세 화면
edit - 일기 수정 화면








개발해야하는 화면은 4개
node.js 기반이었다면 세부주소가 있어야하는 페이지들
Home - 인덱스 페이지
New - 새 일기 작성 페이지
Diary - 일기 상세 페이지
Edit - 작성한 일기 수정 페이지













리액트 훅스 중 하나인 useNavigate는 편리한 기능 제공
예를 들어 바로 edit/id로 보냄
const goEdit = () => {
  navigate(`edit/${id}`);
};

단, 리액트 훅스의 사용엔 제약이 하나 있음
컴포넌트에서만 사용 가능 (컴포넌트를 위한 기능이기 때문에 일반함수로는 제작불가능 - 일반함수로 호출하면 오류 발생)


커스텀 훅 - 리액트 훅의 기능을 사용자가 직접 구현하는 것

